{"version":3,"file":"web3-service-worker-cache.js","sources":["../src/sw.mjs"],"sourcesContent":["// @format\n\nimport pkg from \"../package.json\";\n\nconst CACHE_NAME = `ethereum-mainnet-v${pkg.version}`;\nconst IMMUTABLE_CALLS = [\n  \"eth_getBlockByHash\",\n  \"eth_getBlockByNumber\",\n  \"eth_getBlockTransactionCountByHash\",\n  \"eth_getBlockTransactionCountByNumber\",\n  \"eth_getTransactionByBlockHashAndIndex\",\n  \"eth_getTransactionByBlockNumberAndIndex\",\n  \"eth_getTransactionByHash\",\n  \"eth_getTransactionReceipt\"\n];\n\nself.addEventListener(\"install\", event => {\n  console.log(\"Installing service worker\", CACHE_NAME, event);\n});\n\nself.addEventListener(\"activate\", event =>\n  console.log(\"Activating service worker\", CACHE_NAME, event)\n);\n\nself.addEventListener(\"fetch\", event => {\n  const clonedReq = event.request.clone();\n  if (clonedReq.method !== \"POST\") {\n    // NOTE: We recognize that this request has nothing to do with our caching\n    // and so we send it back to the application.\n    return event.respondWith(fetch(event.request));\n  }\n\n  let sCache;\n  const res = clonedReq\n    .json()\n    .then(reqBody => {\n      return caches.open(CACHE_NAME).then(cache => {\n        sCache = cache;\n\n        if (reqBody?.method && IMMUTABLE_CALLS.includes(reqBody.method)) {\n          return cache.match(event.request);\n        } else {\n          throw new Error(\"Can't cache request\");\n        }\n      });\n    })\n    .then(match => {\n      if (match) {\n        console.log(\"Cache hit\");\n        return match;\n      } else {\n        // TODO: POST cannot be used with cache, so we'll either have to use\n        // cache.put manually or store data IndexedDB.\n        sCache.add(event.request);\n        return fetch(event.request);\n      }\n    })\n    .catch(err => {\n      console.error(err);\n      return fetch(event.request);\n    });\n\n  event.respondWith(res);\n});\n"],"names":["CACHE_NAME","IMMUTABLE_CALLS","self","addEventListener","event","console","log","sCache","clonedReq","request","clone","method","respondWith","fetch","res","json","then","reqBody","caches","open","cache","includes","match","Error","add","err","error"],"mappings":"gBAIMA,4BACAC,EAAkB,CACtB,qBACA,uBACA,qCACA,uCACA,wCACA,0CACA,2BACA,6BAGFC,KAAKC,iBAAiB,UAAW,SAAAC,GAC/BC,QAAQC,IAAI,4BAA6BN,EAAYI,EACtD,GAEDF,KAAKC,iBAAiB,WAAY,SAAAC,UAChCC,QAAQC,IAAI,4BAA6BN,EAAYI,EADhB,GAIvCF,KAAKC,iBAAiB,QAAS,SAAAC,GAC7B,IAOIG,EAPEC,EAAYJ,EAAMK,QAAQC,QAChC,GAAyB,SAArBF,EAAUG,OAGZ,OAAOP,EAAMQ,YAAYC,MAAMT,EAAMK,UAIvC,IAAMK,EAAMN,EACTO,OACAC,KAAK,SAAAC,GACJ,OAAOC,OAAOC,KAAKnB,GAAYgB,KAAK,SAAAI,GAGlC,GAFAb,EAASa,QAELH,GAAAA,EAASN,QAAUV,EAAgBoB,SAASJ,EAAQN,QACtD,OAAOS,EAAME,MAAMlB,EAAMK,SAEzB,UAAUc,MAAM,sBAEnB,EACF,GACAP,KAAK,SAAAM,GACJ,OAAIA,GACFjB,QAAQC,IAAI,aACLgB,IAIPf,EAAOiB,IAAIpB,EAAMK,SACVI,MAAMT,EAAMK,SAEtB,SACM,SAAAgB,GAEL,OADApB,QAAQqB,MAAMD,GACPZ,MAAMT,EAAMK,QACpB,GAEHL,EAAMQ,YAAYE,EACnB"}